module main {

    /*****************************
    * Types, variables, getters *
    *****************************/
    
    // Declare the set of reactions.
    type task_t = enum {
        rxn_0, //reaction_0 of ThreadedThreaded.a
        rxn_1, //reaction_0 of ThreadedThreaded.t
        rxn_2, //reaction_0 of ThreadedThreaded.t
        rxn_3, //reaction_0 of ThreadedThreaded.t
        rxn_4, //reaction_0 of ThreadedThreaded.t
        rxn_5, //reaction_0 of ThreadedThreaded.b
        NULL
    };
    
    // Declare worker schedule.
    type schedule_t = {
        task_t, task_t, task_t, task_t, task_t, task_t
    };
    
    // Declare workers.
    type workers_t = {
        schedule_t, schedule_t
    };
    
    // Define a group of task indices.
    group task_indices : integer = {
        0, 1, 2, 3, 4, 5
    };
    
    // Define a group of worker indices.
    group worker_indices : integer = {
        0, 1
    };
    
    // Compute the most generic schedule.
    // Define the current task set assuming all reactions are triggered.
    group current_task_set : task_t = {
        rxn_0, //reaction_0 of ThreadedThreaded.a
        rxn_1, //reaction_0 of ThreadedThreaded.t
        rxn_2, //reaction_0 of ThreadedThreaded.t
        rxn_3, //reaction_0 of ThreadedThreaded.t
        rxn_4, //reaction_0 of ThreadedThreaded.t
        rxn_5, //reaction_0 of ThreadedThreaded.b
        NULL
    };
    
    // Declare workers.
    var workers : workers_t;
    
    // Get a task from a worker schedule.
    define getT(s : schedule_t, i : integer) : task_t =
        (if (i == 0) then s._1 else
        (if (i == 1) then s._2 else
        (if (i == 2) then s._3 else
        (if (i == 3) then s._4 else
        (if (i == 4) then s._5 else
        (if (i == 5) then s._6 else
        NULL
    ))))));
    
    // Get a worker from workers.
    define getW(workers : workers_t, w : integer) : schedule_t =
        (if (w == 0) then workers._1 else
        workers._2
    );
    
    // Condense the two getters above.
    define get(w, i : integer) : task_t
    = getT(getW(workers, w), i);
    
    /***************
    * Constraints *
    ***************/
    
    // The schedules cannot be all empty.
    axiom(finite_exists (w : integer) in worker_indices ::
    (finite_exists (i : integer) in task_indices ::
        get(w, i) != NULL));
    
    // Each reaction only appears once.
    axiom(finite_forall (w1: integer) in worker_indices ::
    (finite_forall (w2 : integer) in worker_indices ::
    (finite_forall (i : integer) in task_indices ::
    (finite_forall (j : integer) in task_indices ::
        (get(w1, i) != NULL)
        ==> ((w1 == w2 && i == j) <==>
        (get(w1, i) == get(w2, j)))
    ))));
    
    // Each reaction appears at least once.
    axiom(finite_forall (task : task_t) in current_task_set ::
    (finite_exists (w : integer) in worker_indices ::
    (finite_exists (i : integer) in task_indices ::
        get(w, i) == task
    )));
    
    // Dependency graph (DAG) with reactions as nodes and
    // precedence relations as edges.
    define precedes(t1, t2 : task_t) : boolean = false
        || (t1 == rxn_0 && t2 == rxn_1) // reaction_0_of_ThreadedThreaded_a -> reaction_0_of_ThreadedThreaded_t
        || (t1 == rxn_0 && t2 == rxn_4) // reaction_0_of_ThreadedThreaded_a -> reaction_0_of_ThreadedThreaded_t
        || (t1 == rxn_0 && t2 == rxn_3) // reaction_0_of_ThreadedThreaded_a -> reaction_0_of_ThreadedThreaded_t
        || (t1 == rxn_0 && t2 == rxn_2) // reaction_0_of_ThreadedThreaded_a -> reaction_0_of_ThreadedThreaded_t
        || (t1 == rxn_1 && t2 == rxn_5) // reaction_0_of_ThreadedThreaded_t -> reaction_0_of_ThreadedThreaded_b
        || (t1 == rxn_2 && t2 == rxn_5) // reaction_0_of_ThreadedThreaded_t -> reaction_0_of_ThreadedThreaded_b
        || (t1 == rxn_3 && t2 == rxn_5) // reaction_0_of_ThreadedThreaded_t -> reaction_0_of_ThreadedThreaded_b
        || (t1 == rxn_4 && t2 == rxn_5) // reaction_0_of_ThreadedThreaded_t -> reaction_0_of_ThreadedThreaded_b
    ;
    
    // The worker schedules need to respect the dependency graph.
    axiom(finite_forall (w1: integer) in worker_indices ::
    (finite_forall (w2 : integer) in worker_indices ::
    (finite_forall (i : integer) in task_indices ::
    (finite_forall (j : integer) in task_indices ::
        (precedes(get(w1, i), get(w2, j))) ==> (i < j)
    ))));
    
    /*****************
    * Optimizations *
    *****************/
    
    // Optimization: maximize parallelization
    // A macro function that counts the number of reactions
    // that could run in parallel at an instant.
    define countP(step : integer) : integer = 0
        + (if (get(0, step) != NULL) then 1 else 0)
        + (if (get(1, step) != NULL) then 1 else 0)
    ;
    
    // Use sum of square to compute the parallel metric.
    var parallel_metric : integer;
    axiom(parallel_metric == 1
        + (countP(0) * countP(0))
        + (countP(1) * countP(1))
        + (countP(2) * countP(2))
        + (countP(3) * countP(3))
        + (countP(4) * countP(4))
        + (countP(5) * countP(5))
    );
    
    // TODO: Optimization 3: spatial locality
    property prop : !(true);
    
    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex;
    }
}
